#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Client {
public:
    int id;
    string name;
    string password;
    double balance;

    Client(int id, string name, string password, double balance)
        : id(id), name(name), password(password), balance(balance) {
    }

    bool login(int id, string password) {
        return this->id == id && this->password == password;
    }

    void deposit(double amount) {
        balance += amount;
    }

    bool withdraw(double amount) {
        if (amount > balance) return false;
        balance -= amount;
        return true;
    }

    double check_balance() {
        return balance;
    }

    void transfer(Client& recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
        }
    }
};
class Employee {
public:
    string name;
    int id;
    string password;
    double salary;
    vector<Client> clients;

    Employee(string name, int id, string password, double salary)
        : name(name), id(id), password(password), salary(salary) {
    }

    bool login(int id, string password) {
        return this->id == id && this->password == password;
    }

    void add_client(Client client) {
        clients.push_back(client);
    }

    Client* search_client(int id) {
        for (auto& client : clients) {
            if (client.id == id) return &client;
        }
        return nullptr;
    }

    void list_clients() {
        for (auto& client : clients) {
            cout << "ID: " << client.id << ", Name: " << client.name << ", Balance: " << client.balance << endl;
        }
    }

    void edit_client(int id, string name, string password, double balance) {
        Client* client = search_client(id);
        if (client) {
            client->name = name;
            client->password = password;
            client->balance = balance;
        }
    }

    void display_info() {
        cout << "ID: " << id << ", Name: " << name << ", Salary: " << salary << endl;
    }
};
class Admin : public Employee {
public:
    vector<Employee> employees;

    Admin(string name, int id, string password, double salary)
        : Employee(name, id, password, salary) {
    }

    void add_employee(Employee employee) {
        employees.push_back(employee);
    }

    Employee* search_employee(int id) {
        for (auto& employee : employees) {
            if (employee.id == id) return &employee;
        }
        return nullptr;
    }

    void edit_employee(int id, string name, string password, double salary) {
        Employee* employee = search_employee(id);
        if (employee) {
            employee->name = name;
            employee->password = password;
            employee->salary = salary;
        }
    }

    void list_employees() {
        for (auto& employee : employees) {
            cout << "ID: " << employee.id << ", Name: " << employee.name << ", Salary: " << employee.salary << endl;
        }
    }
};
int main() {
    Client client1(1, "adel", "pass123", 7000);
    Client client2(2, "adham", "pass456", 6000);
    Employee emp("abdo", 100, "empPass", 5000);
    Admin admin("seif", 200, "****233", 30000);
    emp.add_client(client1);
    emp.add_client(client2);
    admin.add_employee(emp);
    if (client1.login(1, "pass123")) {
        cout << "Client 1 logged in." << endl;
        client1.deposit(500);
        client1.withdraw(1000);
        cout << "Balance: " << client1.check_balance() << endl;
    }
    if (emp.login(100, "empPass")) {
        cout << "Employee logged in." << endl;
        emp.list_clients();
    }

    if (admin.login(200, "adminPass")) {
        cout << "Admin logged in." << endl;
        admin.list_employees();
    }
    return 0;
}
